		var today = DateTime.Today;
		var friday = today.AddDays(-(int)today.DayOfWeek).AddDays(5);

	public static async Task<IActionResult> Run([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "v1/function")], HttpRequest req, ILogger log)
	{
		MemoryStream outputStream = new MemoryStream();
		StreamWriter writer = new StreamWriter(outputStream);
		JsonWriter jsonWriter = new JsonTextWriter(writer);

		jsonWriter.WriteStartObject();
		jsonWriter.WritePropertyName("Property");
		jsonWriter.WriteValue("Value");
		jsonWriter.WriteEndObject();

		jsonWriter.Flush(); // Flush the json before returning.
		outputStream.Seek(0, SeekOrigin.Begin);
		return new FileStreamResult(outputStream, "application/json");
	}

    private static string GenerateId()
    {
        long i = 1;
        foreach (byte b in Guid.NewGuid().ToByteArray())
        {
            i *= ((int)b + 1);
        }
        return string.Format("{0:x}", i - DateTime.Now.Ticks);
    }

	CopyFilesAsync().Wait();
    private static async Task CopyFilesAsync()
    {
        var storageAccount = CloudStorageAccount.Parse(CloudConfigurationManager.GetSetting("AzureWebJobsStorage"));
        var blobClient = storageAccount.CreateCloudBlobClient();

        var blobContainer = blobClient.GetContainerReference(CloudConfigurationManager.GetSetting("ContainerName"));
        await blobContainer.CreateIfNotExistsAsync();

        var files = Directory.GetFiles(CloudConfigurationManager.GetSetting("DataFolder"));
        Array.Sort(files, StringComparer.InvariantCulture);
        foreach (var file in files)
        {
            var blockBlob = blobContainer.GetBlockBlobReference(Path.GetFileName(file));
            await blockBlob.UploadFromFileAsync(file); //FileMode.Open);
        }
    }

	RemoveFilesAsync().Wait();
    private static async Task RemoveFilesAsync()
    {
        var storageAccount = CloudStorageAccount.Parse(CloudConfigurationManager.GetSetting("AzureWebJobsStorage"));
        var client = storageAccount.CreateCloudBlobClient();
        var container = client.GetContainerReference("optus");
        var blobs = container.ListBlobs();
        foreach (var blob in blobs)
        {
            if (blob is CloudBlockBlob)
            {
                var block = container.GetBlockBlobReference(((CloudBlockBlob)blob).Name);
                await block.DeleteAsync();
            }
        }
    }

    public static void Run([BlobTrigger("samples-workitems/{name}", Connection = "AzureWebJobsStorage")]string myBlob, string name, [Blob("test2/{name}.csv", FileAccess.Write, Connection = "AzureWebJobsStorage")]out string outputBlob, TraceWriter log)
    {
        var outputstring = jsonToCSV(myBlob, ","); // add your logic to covert json to CSV

        log.Info($"C# Blob trigger function Processed blob\n Name:{name} \n Size: {myBlob.Length} Bytes");
        outputBlob = outputstring;
    }

    public static void Run([BlobTrigger("test/{name}", Connection = "AzureWebJobsStorage")]Stream myBlob, string name, [Blob("test2/{name}.csv", FileAccess.Write, Connection = "AzureWebJobsStorage")] Stream outputBlob, TraceWriter log)
    {
        myBlob.Position = 0;
        var str = StreamToString(myBlob);
        var outputstring = jsonToCSV(str, ",");// add your logic to covert json to CSV
        var stream = StringtoStream(outputstring);
        stream.Position = 0;
        stream.CopyTo(outputBlob);
        log.Info($"C# Blob trigger function Processed blob\n Name:{name} \n Size: {myBlob.Length} Bytes");
    }

    public static DataTable jsonStringToTable(string jsonContent)
    {
        DataTable dt = JsonConvert.DeserializeObject<DataTable>(jsonContent);
        return dt;
    }

    public static string jsonToCSV(string jsonContent, string delimiter)
    {
        StringWriter csvString = new StringWriter();
        using (var csv = new CsvWriter(csvString))
        {
            csv.Configuration.Delimiter = delimiter;

            using (var dt = jsonStringToTable(jsonContent))
            {

                foreach (DataColumn column in dt.Columns)
                {
                    csv.WriteField(column.ColumnName);
                }
                csv.NextRecord();

                foreach (DataRow row in dt.Rows)
                {
                    for (var i = 0; i < dt.Columns.Count; i++)
                    {
                        csv.WriteField(row[i]);
                    }
                    csv.NextRecord();
                }
            }
        }

        return csvString.ToString();
    }